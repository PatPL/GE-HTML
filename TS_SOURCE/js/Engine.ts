class Engine {
    
    EditableFieldMetadata: { [id: string]: IEditable } = {
        /* EXAMPLES
        Name: {
            ApplyValueToDisplayElement: (e) => {
                e.innerHTML = this.Name.toUpperCase ();
                console.log (e);
            }, ApplyChangesToValue: (e) => {
                this.Name = (<HTMLInputElement> e).value.replace ("{0}", "{inserted}");
            }
        }, TT: {
            ApplyValueToDisplayElement: (e) => {
                e.innerHTML = `${this.TT}kN`;
            }
        }
        */
    }
    
    Active: boolean = false;
    ID: string = "New-Engine";
    Mass: number = 1;
    Thrust: number = 1000;
    AtmIsp: number = 250;
    VacIsp: number = 300;
    
    PropellantRatio: object = {}; //TODO: Ratios object (keep TankContents input in mind)
    FuelVolumeRatios: boolean = false; //Move to Ratios object?
    
    UseBaseWidth: boolean = true;
    Width: number = 1; //Create separate dimensions object?
    Height: number = 2;
    
    Cost: number = 1000;
    MinThrust: number = 90;
    Ignitions: number = 1;
    PressureFed: boolean = false;
    NeedsUllage: boolean = true;
    
    EnableTestFlight: boolean = false; //Create separate TestFlight object?
    RatedBurnTime: number = 180;
    StartReliability0: number = 92;
    StartReliability10k: number = 96;
    CycleReliability0: number = 90;
    CycleReliability10k: number = 98;
    
    AlternatorPower: number = 0;
    
    Gimbal: number = 6; //Create separate Gimbal object?
    AdvancedGimbal: boolean = false;
    GimbalNX: number = 30;
    GimbalPX: number = 30;
    GimbalNY: number = 0;
    GimbalPY: number = 0;
    
    ModelID: number = 0; //TODO: Create model enum
    PlumeID: number = 0; //TODO: Create plume enum
    TechUnlockNode: number = 0; //TODO: Create technode enum
    
    EngineName: string = ""; //Create separate naming object?
    EngineManufacturer: string = "Generic Engines";
    EngineDescription: string = "This engine was generated by Generic Engines";
    
    EngineVariant: number = 0; //TODO: Create enginevariant enum
    
    UseTanks: boolean = false; //Create separate tank object?
    LimitTanks: boolean = true;
    TanksVolume: number = 0;
    TanksContents: object = {};
    
    PolyType: number = 0 //TODO: Create polymorphism enum
    MasterEngineName: string = "";
    MasterEngineCost: number = 0;
    MasterEngineMass: number = 0;
    
    constructor () {
        
    }
}